import sqlite3
from vkbottle import API, Keyboard, KeyboardButtonColor, Text
from vkbottle.bot import Bot, Message
from loguru import logger
from random import randint, choice
from config import token, admin_id, group_id

db = sqlite3.connect("clicker.db")
sql = db.cursor()
sql.execute("""CREATE TABLE IF NOT EXISTS users (
user INT,
nick TEXT,
balance INT,
click INT,
role TEXT,
captcha INT,
captcha_q TEXT,
referals INT
)""")

sql.execute("""CREATE TABLE IF NOT EXISTS bot (
users INT
)""")
db.commit()

logger.disable("vkbottle") #–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–µ–±–∞–≥–∞

api = API(token)
bot = Bot(token=token)
bot.on.vbml_ignore_case = True #–∏–≥–Ω–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞

async def beuty(balance, plus):
    s_balance = str(balance+plus)
    s_balance = s_balance[::-1]
    empty = ''
    sh = 0
    for i in s_balance:
        if sh == 3:
            empty += f'.{i}'
            sh = 1
        else:
            empty += i
            sh += 1
    empty = empty[::-1]
    return empty

async def beuty2(plus):
    s_balance = str(plus)
    s_balance = s_balance[::-1]
    empty = ''
    sh = 0
    for i in s_balance:
        if sh == 3:
            empty += f'.{i}'
            sh = 1
        else:
            empty += i
            sh += 1
    empty = empty[::-1]
    return empty



@bot.on.message(text=["–Ω–∞—á–∞—Ç—å", '—è', 'üëÆ–ü—Ä–æ—Ñ–∏–ª—å', '–Ω–∞–∑–∞–¥'])
async def start(message: Message):
    menu = (
        Keyboard()
    .add(Text("üí∞–ó–∞—Ä–∞–±–æ—Ç–æ–∫"), color=KeyboardButtonColor.POSITIVE)
    .add(Text("üëÆ–ü—Ä–æ—Ñ–∏–ª—å"), color=KeyboardButtonColor.PRIMARY)
    .add(Text("–í—ã–≤–æ–¥"), color=KeyboardButtonColor.POSITIVE)
    .row()
    .add(Text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), color=KeyboardButtonColor.SECONDARY)
    .add(Text("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏"), color=KeyboardButtonColor.SECONDARY)
    .row()
    .add(Text("–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞"), color=KeyboardButtonColor.POSITIVE)
    )
    human = await api.users.get(user_ids={message.from_id})
    name = human[0].first_name
    sql.execute(f"SELECT * FROM users WHERE user = {message.from_id}")
    if sql.fetchone() is None:
        if message.from_id == admin_id:
            sql.execute(f"INSERT INTO users VALUES ( {message.from_id}, ?, {2000000000}, {0}, 'admin', {0}, 'None', {0} )", (name,))
        else:
            sql.execute(f"INSERT INTO users VALUES ( {message.from_id}, ?, {0}, {0}, 'user', {0}, 'None', {0} )", (name,))
            referal = message.ref
            if referal == None:
                pass
            else:
                referals = sql.execute(f"SELECT referals FROM users WHERE user = {referal}").fetchone()[0]
                balance = sql.execute(f"SELECT balance FROM users WHERE user = {referal}").fetchone()[0]
                sql.execute(f"UPDATE users SET balance = {balance+50000000} WHERE user = {referal} ")
                sql.execute(f"UPDATE users SET balance = {referals+1} WHERE user = {referal} ")

                await api.messages.send(message=f"—Ç—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª @id{message.from_id}\n—Ç–µ–±–µ –≤—ã–¥–∞–Ω–æ $50.000.000", user_id=referal, random_id=0)
        sql.execute(f"SELECT * FROM bot ")
        if sql.fetchone() is None:
            sql.execute(f"INSERT INTO bot VALUES ({1})")
        else:
            users = sql.execute(f"SELECT users FROM bot ").fetchone()[0]
            sql.execute(f"UPDATE bot SET users = {users+1}")
        await message.answer(f"–ø—Ä–∏–≤–µ—Ç {name}, —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", keyboard=menu)
    else:
        nickname = sql.execute(f"SELECT nick FROM users WHERE user = {message.from_id}").fetchone()[0]
        click = sql.execute(f"SELECT click FROM users WHERE user = {message.from_id}").fetchone()[0]
        balance = sql.execute(f"SELECT balance FROM users WHERE user = {message.from_id}").fetchone()[0]
        balance = await beuty2(balance)
        await message.answer(f"–ô–æ—É, {nickname}\n–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${balance}.\n–ö–ª–∏–∫–æ–≤: {click}", keyboard=menu)

    db.commit()

@bot.on.message(text="üí∞–ó–∞—Ä–∞–±–æ—Ç–æ–∫")
async def work(message: Message):
    work = (
        Keyboard()
        .add(Text("–ö–ª–∏–∫"), color=KeyboardButtonColor.POSITIVE)
        #.add(Text("–ú–æ–Ω–µ—Ç–∫–∞"), color=KeyboardButtonColor.POSITIVE)
        .row()
        .add(Text("–ù–∞–∑–∞–¥"), color=KeyboardButtonColor.SECONDARY)
    )
    nickname = sql.execute(f"SELECT nick FROM users WHERE user = {message.from_id}").fetchone()[0]
    await message.answer(f"{nickname}, —Ç—ã –≤ –º–µ–Ω—é –∑–∞—Ä–∞–±–æ—Ç–∫–∞", keyboard=work)

    db.commit()



@bot.on.message(text="–∫–ª–∏–∫")
async def click(message: Message):
    captcha = randint(1, 50)
    if captcha == 10:
        captcha_k = (
            Keyboard()
            .add(Text("–ì–¥–µ"), color=KeyboardButtonColor.SECONDARY)
            .add(Text("–ü–æ—á–µ–º—É"), color=KeyboardButtonColor.SECONDARY)
            .add(Text("–ó–∞—á–µ–º"), color=KeyboardButtonColor.SECONDARY)
        )
        question = ["–ì–¥–µ", "–ü–æ—á–µ–º—É", "–ó–∞—á–µ–º"]
        question_r = choice(question)
        anti_bot = randint(1, 25)
        anti_bot2 = randint(1, 5)
        anti_bot_ready = str(anti_bot2) * anti_bot
        await message.answer(f"–ö–∞–ø—á–∞: –≤—ã–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–æ–≤–æ\n{anti_bot_ready} {question_r}", keyboard=captcha_k)
        sql.execute(f"UPDATE users SET captcha = {1} WHERE user = {message.from_id}")
        sql.execute(f"UPDATE users SET captcha_q = ? WHERE user = {message.from_id}", (question_r,))
    else:
        clicker = (
            Keyboard()
            .add(Text("–∫–ª–∏–∫"), color=KeyboardButtonColor.POSITIVE)
            .add(Text("–Ω–∞–∑–∞–¥"), color=KeyboardButtonColor.SECONDARY)
        )
        click = sql.execute(f"SELECT click FROM users WHERE user = {message.from_id}").fetchone()[0]
        balance = sql.execute(f"SELECT balance FROM users WHERE user = {message.from_id}").fetchone()[0]
        nickname = sql.execute(f"SELECT nick FROM users WHERE user = {message.from_id}").fetchone()[0]
        plus = randint(100000, 300000)
        sql.execute(f"UPDATE users SET balance = {balance+plus} WHERE user = {message.from_id}")
        sql.execute(f"UPDATE users SET click = {click+1} WHERE user = {message.from_id}")
        empty = await beuty(balance, plus)
        plus = await beuty2(plus)
        await message.answer(f"{nickname}, —Ç—ã –ø–æ–ª—É—á–∏–ª +${plus}.\nüí∞–ë–∞–ª–∞–Ω—Å: {empty}.\nüëÜ–ö–ª–∏–∫–æ–≤: {click+1}")

    db.commit()

@bot.on.message(text=['–ü–æ—á–µ–º—É', '–ì–¥–µ', '–ó–∞—á–µ–º'])
async def captcha_answer(message: Message):
    captcha_u = sql.execute(f"SELECT captcha FROM users WHERE user = {message.from_id} ").fetchone()[0]
    question_u = sql.execute(f"SELECT captcha_q FROM users WHERE user = {message.from_id} ").fetchone()[0]
    if captcha_u == 1:
        if question_u == message.text:
            clicker = (
                Keyboard()
                .add(Text("–∫–ª–∏–∫"), color=KeyboardButtonColor.POSITIVE)
                .add(Text("–Ω–∞–∑–∞–¥"), color=KeyboardButtonColor.SECONDARY)
                )
            sql.execute(f"UPDATE users SET captcha = {0} WHERE user = {message.from_id}")
            sql.execute(f"UPDATE users SET captcha_q = 'None' WHERE user = {message.from_id}")
            await message.answer("–¢—ã –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É", keyboard=clicker)
        else:
            await message.answer("–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π")
    else:
        pass

    db.commit()

@bot.on.message(text="–í—ã–≤–æ–¥")
async def deposit(message: Message):
    balance = sql.execute(f"SELECT balance FROM users WHERE user = {message.from_id}").fetchone()[0]
    nickname = sql.execute(f"SELECT nick FROM users WHERE user = {message.from_id}").fetchone()[0]
    if balance < 1000000000:
        await message.answer("üö´–¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 1–∫–∫–∫")
    else:
        sql.execute(f"UPDATE users SET balance = {0} WHERE user = {message.from_id}")
        balance = await beuty2(balance)
        await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞\n–ë—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–æ ${balance}")
        await api.messages.send(message=f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç @id{message.from_id}\n–Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É ${balance}", user_id=477715545, random_id=0)
    
    db.commit()

@bot.on.message(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def bot_stat(message: Message):
    users = sql.execute(f"SELECT users FROM bot ").fetchone()[0]
    await message.answer(f"–ò–≥—Ä–æ–∫–æ–≤ –≤—Å–µ–≥–æ - {users}")

@bot.on.message(text=["–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏"])
async def settings(message: Message):
    user_settings = (
        Keyboard()
        .add(Text("–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫"), color=KeyboardButtonColor.POSITIVE)
        .add(Text("–Ω–∞–∑–∞–¥"), color=KeyboardButtonColor.PRIMARY)
    )
    await message.answer("‚öôÔ∏è–¢—ã –ø–æ–ø–∞–ª –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫", keyboard=user_settings)

@bot.on.message(text="–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫")
async def bot_stat(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏ \"–Ω–∏–∫\" –∏ –∫–∞–∫ —è —Ç–µ–±—è –º–æ–≥—É –Ω–∞–∑—ã–≤–∞—Ç—å")

@bot.on.message(text=["–Ω–∏–∫ <new_nick>"])
async def change_nick(message: Message, new_nick=None):
    if len(new_nick) > 15:
        await message.answer("–Ω–∏–∫ –¥–æ–ª–∂–Ω–µ–Ω –±—ã—Ç—å –º–µ–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤")
    else:
        sql.execute(f"UPDATE users SET nick = ? WHERE user = {message.from_id} ", (new_nick,))
        await message.answer(f"–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –Ω–∏–∫ {new_nick}")

    db.commit()


@bot.on.message(text="–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞")
async def ref_get(message: Message):
    nickname = sql.execute(f"SELECT nick FROM users WHERE user = {message.from_id}").fetchone()[0]
    referals = sql.execute(f"SELECT referals FROM users WHERE user = {message.from_id}").fetchone()[0]
    await message.answer(f"""{nickname}, —Ç–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://vk.com/write-{group_id}?ref={message.from_id}&ref_source=1 
    \n–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–æ–ª—É—á–∏ $50.000.000
    –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ —Ç–æ–±–æ–π: {referals}""")



print("–ì–æ—Ç–æ–≤–æ")
bot.run_forever()